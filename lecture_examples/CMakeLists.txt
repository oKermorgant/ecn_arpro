cmake_minimum_required (VERSION 3.5)
project(ARPRO_examples)


set(CMAKE_BUILD_TYPE Debug)
add_compile_options(-pthread)

find_package (Threads)
find_package(yaml-cpp)
find_package(VISP)

set(CMAKE_CXX_STANDARD 17)

include_directories(.)

add_executable(hello hello.cpp )
add_executable(forloop forloop.cpp)
add_executable(whileloop whileloop.cpp)
add_executable(switchcase switchcase.cpp)
add_executable(scope scope.cpp)
add_executable(profiling profiling.cpp)
add_executable(chrono chrono.cpp)
add_executable(debug debug.cpp)
add_executable(function function.cpp)
add_executable(smart_ptr smart_ptr.cpp)
add_executable(pointers pointers.cpp)
add_executable(class class.cpp)
add_executable(blocks blocks.cpp)
add_executable(overload overload.cpp)
add_executable(multiple_return multiple_return.cpp)
add_executable(random random.cpp)
add_executable(fibonacci fibonacci.cpp)
add_executable(copy_elision copy_elision.cpp)
add_executable(exception exception.cpp)
add_executable(array_initializer array_initializer.cpp)
add_executable(macros macros.cpp)
add_executable(optional optional.cpp)
add_executable(pid pid.cpp)
add_executable(pointers_graph pointers_graph.cpp)
add_executable(fleet fleet/fleet.cpp fleet/robot.cpp)

if(YamlCpp_FOUND)
  include_directories(${YamlCpp_INCLUDE_DIRS})
    add_executable(config config.cpp)
    target_link_libraries(config yaml-cpp)
    add_executable(lambda lambda.cpp)
    add_executable(algorithm algorithm.cpp)
    add_executable(inheritance inheritance.cpp)
    add_executable(templates templates.cpp)
    add_executable(templates2 templates2.cpp)
endif()

if(VISP_FOUND)
  add_executable(debug_visp debug_visp.cpp)
  target_include_directories(debug_visp PRIVATE ${VISP_INCLUDE_DIRS})
  target_link_libraries(debug_visp ${VISP_LIBRARIES})
endif()

add_executable(thr thr.cpp)
target_link_libraries(thr ${CMAKE_THREAD_LIBS_INIT})
